openapi: 3.0.4
info:
  title: My API (External)
  description: External API - Version 1.0
  version: '1.0'
paths:
  /v1/device/custom-header:
    get:
      tags:
        - Device
      summary: Retrieves a sample resource with custom headers.
      description: This endpoint demonstrates how custom headers appear in Swagger documentation.
      parameters:
        - name: X-Custom-Header
          in: header
          description: A custom header for demonstration purposes.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { }
  /v1/device/public:
    get:
      tags:
        - Device
      summary: Get public devices.
      description: This endpoint is accessible without authentication.
      responses:
        '200':
          description: Returns the list of devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
  /v1/device/private:
    get:
      tags:
        - Device
      summary: Get private devices.
      description: This endpoint is protected and requires a valid token with the "api1" scope.
      responses:
        '200':
          description: Returns the list of devices and user details.
          content:
            application/json:
              schema: { }
        '401':
          description: Unauthorized if the token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/device:
    get:
      tags:
        - Device
      summary: Get devices.
      description: This endpoint is deprecated. Please use `/devices/public` instead.
      responses:
        '410':
          description: Gone - This endpoint is deprecated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      deprecated: true
    post:
      tags:
        - Device
      summary: Create a custom device.
      description: This endpoint allows you to generate a custom device by providing the complete Device.
      requestBody:
        description: The request body containing the custom Device.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          text/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/device/with-params:
    post:
      tags:
        - Device
      summary: Create a device with additional parameters.
      description: This endpoint allows you to create a device by providing additional parameters such as location and status.
      parameters:
        - name: location
          in: query
          description: The location for the device.
          schema:
            type: string
        - name: status
          in: query
          description: 'The status of the device (0=Offline, 1=Online).'
          schema:
            type: integer
            format: int32
            default: 0
      requestBody:
        description: The request body containing the Device details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
          text/json:
            schema:
              $ref: '#/components/schemas/Device'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/v1/device/{id}/{date}':
    delete:
      tags:
        - Device
      summary: Delete a device by ID and date.
      description: "This endpoint deletes a device based on the provided ID and date.\r\nThe date must be in the format `yyyy-MM-dd`.\r\nExample: `/devices/1/2025-04-30`."
      parameters:
        - name: id
          in: path
          description: The ID of the device to delete.
          required: true
          schema:
            type: integer
            format: int32
            default: 2
        - name: date
          in: path
          description: The date of the device registration to delete.
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '204':
          description: No content - The device was successfully deleted.
        '400':
          description: Bad request - The date format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not found - The device with the specified ID and date does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/device/v1-only:
    get:
      tags:
        - Device
      summary: Get device.
      description: "This endpoint is only available in API version 1.0.\r\nIt demonstrates a feature that exists only in the first version of the API."
      responses:
        '200':
          description: Returns the V1 device data.
  /v1/device/summary:
    get:
      tags:
        - Device
      summary: Get device summary (Available in both V1 and V2).
      description: This endpoint is available in both API versions to exemplify adding an endpoint to multiple API versions.
      responses:
        '200':
          description: Returns device summary data.
  /v1/device/limited:
    get:
      tags:
        - DeviceRateLimit
      summary: "Get devices with rate limiting.\r\nTest with:\r\ncurl -X GET http://localhost:5000/devices/limited\r\nMore then 5 requests per minute will return a 429 error (Too Many Requests)."
      description: "This endpoint is protected by a rate limiting policy (e.g., fixed window, sliding window, etc.).\r\nUseful to demonstrate or enforce quota restrictions per client.\r\nRate limits and quota are returned in headers:\r\n- X-RateLimit-Limit: Maximum requests allowed in the current window.\r\n- X-RateLimit-Remaining: Requests remaining in the current window.\r\n- X-Quota-Remaining: Requests remaining in your monthly quota."
      responses:
        '200':
          description: OK
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/device/devices-summary:
    get:
      tags:
        - External
      summary: Get device summary (External API).
      description: "This endpoint is available to external clients and provides a clean, \r\npublic-facing device data without sensitive internal information.\r\nUses \"External\" tag for documentation filtering."
      responses:
        '200':
          description: Returns public device data.
        '401':
          description: Unauthorized if the token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/weather/external/forecast:
    get:
      tags:
        - External
      summary: Get public weather forecast summary (External API).
      description: "This endpoint is available to external clients and provides a clean, \r\npublic-facing weather forecast without sensitive internal data.\r\nUses \"External\" tag for documentation filtering.Add commentMore actions\r\nAvailable in both V1 and V2 for external client compatibility."
      responses:
        '200':
          description: Returns public weather forecast data.
        '401':
          description: Unauthorized if the token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/weather/custom-header:
    get:
      tags:
        - WeatherForecast
      summary: Retrieves a sample resource with custom headers.
      description: This endpoint demonstrates how custom headers appear in Swagger documentation.
      parameters:
        - name: X-Custom-Header
          in: header
          description: A custom header for demonstration purposes.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /v1/weather/limited:
    get:
      tags:
        - WeatherForecast
      summary: "Get a weather forecast with rate limiting.\r\nTest with:\r\ncurl -X GET http://localhost:5000/weather/limited\r\nMore then 5 requests per minute will return a 429 error (Too Many Requests)."
      description: "This endpoint is protected by a rate limiting policy (e.g., fixed window, sliding window, etc.).\r\nUseful to demonstrate or enforce quota restrictions per client.\r\nRate limits and quota are returned in headers:\r\n- X-RateLimit-Limit: Maximum requests allowed in the current window.\r\n- X-RateLimit-Remaining: Requests remaining in the current window.\r\n- X-Quota-Remaining: Requests remaining in your monthly quota."
      responses:
        '200':
          description: OK
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/weather/public:
    get:
      tags:
        - WeatherForecast
      summary: Get a public weather forecast.
      description: This endpoint is accessible without authentication.
      responses:
        '200':
          description: Returns the list of weather forecasts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherForecast'
  /v1/weather/private:
    get:
      tags:
        - WeatherForecast
      summary: Get a private weather forecast.
      description: This endpoint is protected and requires a valid token with the "api1" scope.
      responses:
        '200':
          description: Returns the list of weather forecasts and user details.
        '401':
          description: Unauthorized if the token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/weather/deprecated:
    get:
      tags:
        - WeatherForecast
      summary: '[Deprecated] Get a weather forecast (old version).'
      description: This endpoint is deprecated. Please use `/weather/public` instead.
      responses:
        '410':
          description: Gone - This endpoint is deprecated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      deprecated: true
  /v1/weather/custom:
    post:
      tags:
        - WeatherForecast
      summary: Generate a custom weather forecast.
      description: This endpoint allows you to generate a custom weather forecast by providing a summary.
      requestBody:
        description: The request body containing the custom summary.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomForecastRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CustomForecastRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CustomForecastRequest'
      responses:
        '200':
          description: Returns the generated weather forecast.
        '400':
          description: Bad request if the input is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/weather/CompleteForecast:
    post:
      tags:
        - WeatherForecast
      summary: Generate a custom weather forecast.
      description: This endpoint allows you to generate a custom weather forecast by providing the complete WeatherForecast.
      requestBody:
        description: The request body containing the custom WeatherForecast.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherForecast'
          text/json:
            schema:
              $ref: '#/components/schemas/WeatherForecast'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WeatherForecast'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherForecast'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/weather/custom-with-params:
    post:
      tags:
        - WeatherForecast
      summary: Generate a weather forecast with additional parameters.
      description: This endpoint allows you to generate a custom weather forecast by providing additional parameters such as location and humidity.
      parameters:
        - name: location
          in: query
          description: The location for the weather forecast.
          schema:
            type: string
        - name: humidity
          in: query
          description: The humidity level for the weather forecast.
          schema:
            type: integer
            format: int32
      requestBody:
        description: The request body containing the custom WeatherForecast details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherForecast'
          text/json:
            schema:
              $ref: '#/components/schemas/WeatherForecast'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WeatherForecast'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/v1/weather/{id}/{date}':
    delete:
      tags:
        - WeatherForecast
      summary: Delete a weather forecast by ID and date.
      description: "This endpoint deletes a weather forecast based on the provided ID and date.\r\nThe date must be in the format `yyyy-MM-dd`.\r\nExample: `/weather/1/2025-04-30`."
      parameters:
        - name: id
          in: path
          description: The ID of the weather forecast to delete.
          required: true
          schema:
            type: integer
            format: int32
            default: 2
        - name: date
          in: path
          description: The date of the weather forecast to delete.
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '204':
          description: No content - The weather forecast was successfully deleted.
        '400':
          description: Bad request - The date format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not found - The weather forecast with the specified ID and date does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /v1/weather/v1-only:
    get:
      tags:
        - WeatherForecast
      summary: Get weather forecast data (V1 only endpoint).
      description: "This endpoint is only available in API version 1.0.\r\nIt demonstrates a feature that exists only in the first version of the API."
      responses:
        '200':
          description: Returns the V1 weather forecast data.
  /v1/weather/summary:
    get:
      tags:
        - WeatherForecast
      summary: Get weather summary (Available in both V1 and V2).
      description: "This endpoint is available in both API versions but returns different data structures.\r\nV1 returns basic summary, while V2 includes additional metadata."
      responses:
        '200':
          description: Returns version-specific weather summary data.
components:
  schemas:
    CustomForecastRequest:
      type: object
      properties:
        summary:
          type: string
          description: The custom summary for the weather forecast.
          nullable: true
      additionalProperties: false
      description: Request model for generating a custom weather forecast.
    Device:
      type: object
      properties:
        name:
          type: string
          nullable: true
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        dimension:
          $ref: '#/components/schemas/Dimension'
      additionalProperties: false
      description: Represents a device.
    DeviceType:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the device type
          format: int32
        name:
          type: string
          description: The name of the device type
          nullable: true
      additionalProperties: false
      description: Represents a device type.
    Dimension:
      type: object
      properties:
        width:
          type: number
          description: The width of the device in centimeters
          format: double
        height:
          type: number
          description: The height of the device in centimeters
          format: double
        depth:
          type: number
          description: The depth of the device in centimeters
          format: double
        volume:
          type: number
          description: Gets the volume of the device in cubic centimeters.
          format: double
          readOnly: true
      additionalProperties: false
      description: Represents the physical dimensions of a device.
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message.
          nullable: true
        details:
          type: string
          description: Additional details about the error.
          nullable: true
      additionalProperties: false
      description: Represents an error response.
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    WeatherForecast:
      type: object
      properties:
        date:
          type: string
          format: date
        temperatureC:
          type: integer
          description: The temperature in Celsius. Acceptable values range between -20 and 55.
          format: int32
        summary:
          type: string
          nullable: true
        temperatureF:
          type: integer
          description: Gets the temperature in Fahrenheit.
          format: int32
          readOnly: true
      additionalProperties: false
      description: Represents a weather forecast.
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: http://localhost:5001/connect/token
          scopes:
            api1: Access to My API
security:
  - oauth2:
      - api1