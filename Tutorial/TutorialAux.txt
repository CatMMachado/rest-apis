https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/tree/review?ref_type=heads

Overview:
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/overview.md

- Common API Guidelines (content list below): read
- REST API Guidelines - read
[https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/media-type.md]
- Async API Guidelines
- gRPC


Common API Guidelines:
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/nav.md

- Introduction: read
- API Lifecycle Phases: read
    Related:
    - Guideline API Versioning: read
    (https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/api-versioning.md)
    - Guideline API Version in HTTP Requests (is a subset of the previous one) : read
- API specification (link below): read
- API documentation (link below): read
- API versioning (it's the same as above): read
- JSON Property Naming: read
- HTTP-based API Protection: read
    Related:
    - SGRE API Security => Este link está incompleto! Não dá para aceder.
[https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/http-api-protection.md]

API Specification:
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/api-specification.md

API Documentation:
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/api-documentation.md



--
For the tutorial:

- Refer the concrete pages of the API Guidelines repo from which the information referred comes from.
Decision: Refer the pages so that the users can follow a link. If it changes, they'll have to use the URL as reference as I did.

- Version number format:
    <MAJOR>.<MINOR>.<PATCH> ; example 1.0.4
    Pre-release versions: <MAJOR>.<MINOR>.<PATCH>-<pre-release>; Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7
1. "If API implementation allows calling it without version and when no version is specified, API compatible to first release is used."
2. Option 1 -  API version in URI path
"example: https://example.com/myapi/v1/<resource-name>
Where v1 represents Major version 1, the latest minor version and the latest patch version in that minor version."
3. Option 2 - API version in custom request header
"The header has the form Api-Version: <MAJOR>."
4. API Version in HTTP Responses
"A header with full semantic version value SHOULD be returned in the response e.g., Api-Version: <MAJOR>.<MINOR>.<PATCH>."
[https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/api-versioning.md]

- API specification:
1. "APIs MUST come with API specifications as means of detailed technical documentation. 
For synchronous HTTP-based APIs, OpenAPI specifications of at least version 3 MUST be used. 
For asynchronous messaging APIs, AsyncAPI specifications of at least version 2 MUST be used. 
The API specifications SHOULD be provided in YAML format for consistency reasons."
1.1. Tendo em conta que as guidelines pedem YAML, vamos retirar a opção de geração de JSON.

2. API specification content:
- fully defined request and response, or message schemas
- header, query, and path parameter details including allowed values and default values
- details on error response status codes, error schemas, error types, and a clear association of errors to operations
- restrictions with respect to format, character or number range of parameters and properties
- restrictions with respect to number of array items or additional properties
- examples for all parameters and request/response bodies
- descriptions and summaries SHOULD contain meaningful additional information to already existing information such as the names of properties, parameters, or operations
- limits which are dependent on the used service plan, acquired quota, the service region or deployment environment MAY be mentioned in the API specification, but their concrete values SHOULD NOT be added to an API specification (see service usage limits in API Documentation).
- deprecation notes, see below

3. Deprecation notes:
"OpenAPI or AsyncAPI properties "description" and "deprecated" SHOULD be used, if applicable."
"Deprecation notes SHOULD mention which other API or part of an API should be used instead of the deprecated one."
[https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/api-specification.md]

- API documentation
"The individual service documentation consists of the following parts:
1. Service introduction
2. API specifications:
2.1 "Visualizations for each API specification MUST be provided, e.g., in form of Swagger UI or generated AsyncAPI HTML pages."
3. Access control: "(...) Permissions MUST be documented with clear association to API operations in the corresponding API specification or in separate documents, as appropriate."
4. Service usage limits:
4.1. "The service documentation SHOULD describe existing usage limits and provide limit values for static limits."
4.2. "API parameter or body property format limits MUST be described in the API specification."
(Etc.)

- HTTP-based API Protection
1. "APIs MUST adhere to OAuth 2.0 Bearer Token Usage (...)"
[https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/http-api-protection.md]

- Referir quando os tópicos não são suportados pela OpenAPI, mas que podem ser indicados nos campos "description". Ex., rate limits.
- Referir que o tutorial apenas se refere àquilo que no repo das guidelines chamam de "API specification", que é a parte técnica. Esta especificação é um dos componentes daquilo que as guidelines chamam de "API documentation".
[https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/api-documentation.md & https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/common/api-specification.md]
- In the minimal API approach we don't need to exlicitly state that the media type is "application/json". But in the controller-based, if we don't add "[Produces("application/json")]" to the endpoint, the specification will contains 3 options for the media type.
1. Add this "produces" attribute to every endpoint.

- REST API Guidelines
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/media-type.md:
1. "It is recommended using the media type application/json for exchanging data."
2. "The root of every document SHOULD contain a JSON object." => Temos um exemplo em que o endpoint retorna uma String.

https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/common-operations.md:
3. "Updating fields of a resource SHOULD use the HTTP verb PATCH for request" => Testar isto.
3.1. In case of trying to update an non-existing resource, return a 404 error.
4. When performing a Put, Patch or Delete , if no return object is provided, use the code 204 instead of 200.
5. "Updating resources by replacing them MUST use the HTTP verb PUT for request". This applies when changing all the fields in the resource and not just some of them.

- Change our examples' context from "Weather" to "Device", to be aligned with the API guidelines.
Examples:
Get Device; Get Devices; Post Device; Etc.
Device:
name
deviceType:
    id
    name
dimension:
    widht
    height
    depth

- Bulk operations
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/bulk-operations.md:
"A bulk operation (except GET) SHOULD be indicated explicitly via the media type application/vnd.sgre.bulk+json"
"Note that the data property is an array(...)"

- Sparse fieldsets 
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/sparse-fieldsets.md:
"Sparse fieldsets MUST be defined via the fields query parameter"
Example: "GET /articles?fields=title,body,comments HTTP/1.1"
Use this as an example of a parameter
2. "The fields parameter SHOULD be optional."
3. "You might consider defining and documenting a default value for the fields parameter, so that API clients can adjust this value to their needs if required."
4. "If an invalid fields expression is set (including a fields expression consisting of space characters only), a response with the status code 400 Bad Request SHOULD be returned."

- Sorting 
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/sorting.md:
"An API provider has the possibility to specify in the API specification, which fields are supported to sort the collection in the response."
"If the API restricts the sort functionality on dedicated fields (i.e. member of a resource), these "sort fields" MUST be documented in the API specification. 
"The value for sort MUST represent sort fields." Example:  GET /devices?sort=age
"API SHOULD support defining the sort order for each sort field individually"
"An API MAY support the customization of the sorting order. The API client MAY prefix the sort field with a minus (U+002D HYPHEN-MINUS, "-") for descending and plus (U+002B PLUS SIGN, "+") for ascending order."
Example: 
GET /devices?sort=-created
    The above example should return the newest devices first, because it is in descending sort order.
            GET /devices?sort=+created
        The above example should return the oldest devices first, because it is in ascending sort order.
5. "The default sort order MUST be ascending as if a + is specified"

- Some of the guidelines are generic and not just for RESt. We need to make this clear.

- API Security
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/security.md
Como falado na daily, nós não queremos ter uma implementação 100% funcional. Em concreto no cado de autenticação, rate limiting, estamos a adicionar o necessário para vermos como este tipo de informação se adiciona à API specification.
Quando falarmos do(s) repositórios pela 1ª vez, vamos explicar esta decisão de design.
Relembraremos o tema sempre que necessário.

- Best practices
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/best-practices.md

"APIs SHOULD use level 3, making use of [/devsecops/api-governance/api-guidelines/-/blob/review/rest/media-type.md#mediatyperule101.5]links for hypermedia controls. This is a very efficient way for expressing relationships to other REST resources."
Não é feito out of the box pelo Swashbuckle. A forma mais fácil é adicioná-los à mão após a geração do documento com a spec.
Exemplo: ver chatGpt
1.1 "If there are reasons for not using hypermedia, at least level 2 should be used."

- Frisar que o foco do tutorial foi na utilização da tool e daquilo que ela consegue adicionar/gerar com base no código existente. Foi por decisão que não foram adicionadas abordagens para extender as atuais funcionalidades, uma vez que elas são suficientes para cumprir com o pedido nas API guidelines.
Ex., de coisa pedida e não suportada: links para coneção entre recursos indicados no Richardson's maturity level 3.

- Data types
https://gitlab.prod.sgre.one/devsecops/api-governance/api-guidelines/-/blob/review/rest/datatypes.md

"It is recommended to use the "format" property in OpenAPI to enable validation and interoperability between client and server."
The property "format" is automatically added to the specification, based on the data types defined in your code.
